// Generated by Dagger (https://dagger.dev).
package com.etu.bookcrossing.di;

import com.etu.bookcrossing.database.AppDatabase;
import com.etu.bookcrossing.database.repository.IUserRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DatabaseModule_ProvideUserRepositoryFactory implements Factory<IUserRepository> {
  private final DatabaseModule module;

  private final Provider<AppDatabase> appDatabaseProvider;

  public DatabaseModule_ProvideUserRepositoryFactory(DatabaseModule module,
      Provider<AppDatabase> appDatabaseProvider) {
    this.module = module;
    this.appDatabaseProvider = appDatabaseProvider;
  }

  @Override
  public IUserRepository get() {
    return provideUserRepository(module, appDatabaseProvider.get());
  }

  public static DatabaseModule_ProvideUserRepositoryFactory create(DatabaseModule module,
      Provider<AppDatabase> appDatabaseProvider) {
    return new DatabaseModule_ProvideUserRepositoryFactory(module, appDatabaseProvider);
  }

  public static IUserRepository provideUserRepository(DatabaseModule instance,
      AppDatabase appDatabase) {
    return Preconditions.checkNotNullFromProvides(instance.provideUserRepository(appDatabase));
  }
}
